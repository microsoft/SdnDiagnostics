# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

function Test-SdnCertificateRotationConfig {
    <#
    .SYNOPSIS
        Validate the Cert Rotation Config provided is correct. Ensure certificates specified present on the machine.
    .PARAMETER NcNodeList
        The NcNodeList that retrieved via Get-SdnNetworkControllerInfoOffline.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
    .PARAMETER CertRotateConfig
        The Config generated by New-SdnCertificateRotationConfig to include NC REST certificate thumbprint and node certificate thumbprint.
    #>

    param (
        [Parameter(Mandatory = $true)]
        [PSCustomObject[]]
        $NcNodeList,
        [Parameter(Mandatory = $true)]
        [hashtable]
        $CertRotateConfig,
        [Parameter(Mandatory = $false)]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]
        $Credential = [System.Management.Automation.PSCredential]::Empty
    )

    try {

        if([string]::IsNullOrEmpty($CertRotateConfig["NcRestCert"])){
            Trace-Output "NcRestCert not specified in CertRotateConfig" -Level:Error
            return $false
        }

        $ncRestCert = $CertRotateConfig["NcRestCert"]
        foreach($ncNode in $NcNodeList){
            if($CertRotateConfig["ClusterCredentialType"] -ieq "X509"){
                $nodeCert = $CertRotateConfig[$ncNode.NodeName.ToLower()]
                if([string]::IsNullOrEmpty($nodeCert)){
                    Trace-Output "The ClusterCredentialType is X509 but Node $($ncNode.NodeName) does not have certificate specified" -Level:Error
                    return $false
                }else{
                    $certValid = Invoke-PSRemoteCommand -ComputerName $ncNode.IpAddressOrFQDN -ScriptBlock {
                        $nodeCertObj = Get-Item -Path "Cert:\LocalMachine\My\$using:nodeCert"
                        if($null -eq $nodeCertObj){
                            Write-Host "[$(HostName)] Node Certificate with thumbprint $using:nodeCert not found" -ForegroundColor:Red
                            return $false
                        }else{
                            if($nodeCertObj.NotAfter -le (Get-Date)){
                                Write-Host "[$(HostName)] Node Certificate with thumbprint $using:nodeCert found but expired" -ForegroundColor:Red
                                return $false
                            }
                        }
                        return $true
                    }

                    if(!$certValid){
                        Trace-Output "Node $($ncNode.NodeName) does not have validate Node certificate with thumbprint $nodeCert installed" -Level:Error
                        return $false
                    }
                }
            }

            $certValid = Invoke-PSRemoteCommand -ComputerName $ncNode.IpAddressOrFQDN -ScriptBlock {
                $ncRestCertObj = Get-Item -Path "Cert:\LocalMachine\My\$using:ncRestCert"
                if($null -eq $ncRestCertObj){
                    Write-Host "[$(HostName)] NcRest Certificate with thumbprint $using:ncRestCert not found" -ForegroundColor:Red
                    return $false
                }else{
                    if($ncRestCertObj.NotAfter -le (Get-Date)){
                        Write-Host "[$(HostName)] NcRest Certificate with thumbprint $using:ncRestCert found but expired" -ForegroundColor:Red
                        return $false
                    }
                }
                return $true
            }

            if(!$certValid){
                Trace-Output "Node $($ncNode.NodeName) does not have validate NcRest certificate with thumbprint $ncRestCert installed" -Level:Error
                return $false
            }
        }
        return $true
    }
    catch {
        "{0}`n{1}" -f $_.Exception, $_.ScriptStackTrace | Trace-Output -Level:Error
    }
}
